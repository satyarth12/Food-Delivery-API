# Generated by Django 3.2.2 on 2021-05-20 23:23

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category_name', models.CharField(max_length=250)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Kitchen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('about', models.TextField(blank=True, null=True)),
                ('phone_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'.", regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(max_length=256)),
                ('opening_time', models.TimeField(blank=True, null=True)),
                ('closing_time', models.TimeField(blank=True, null=True)),
                ('delivery', models.BooleanField(default=False)),
                ('takeaway', models.BooleanField(default=False)),
                ('veg', models.BooleanField(default=True)),
                ('nonveg', models.BooleanField(default=False)),
                ('menu_image', models.ImageField(blank=True, null=True, upload_to='files/menu/')),
                ('kitchen_image', models.ImageField(blank=True, null=True, upload_to='files/kitchen_image/')),
                ('kitchen_welcome_text', models.TextField(blank=True, null=True)),
                ('total_order_placed', models.IntegerField(blank=True, default=0, null=True)),
                ('kitchen_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KitchenCuisine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('kitchen_ranking', models.CharField(blank=True, help_text='Rank kitchen according to their popluraity.', max_length=100, null=True)),
                ('cuisine_names', taggit.managers.TaggableManager(help_text="What's the kitchen main cuisines? Not more than 5.", through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('kitchen', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='restaurant.kitchen')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KitchenAdress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.TextField(blank=True, null=True)),
                ('area', models.CharField(blank=True, max_length=256, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('pincode', models.CharField(max_length=150)),
                ('latitude', models.CharField(blank=True, max_length=256, null=True)),
                ('longitude', models.CharField(blank=True, max_length=256, null=True)),
                ('kitchen', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='kitchen_address', to='restaurant.kitchen')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=256)),
                ('cost', models.CharField(max_length=15)),
                ('desc', models.TextField(blank=True, null=True)),
                ('ingredients', models.TextField()),
                ('image', models.ImageField(blank=True, max_length=1023, null=True, upload_to='files/item/', verbose_name='Image 1')),
                ('image_2', models.ImageField(blank=True, max_length=1023, null=True, upload_to='files/item/', verbose_name='Image 2')),
                ('delivery_time', models.CharField(blank=True, max_length=10, null=True, verbose_name='Cooking Time')),
                ('is_available', models.BooleanField(default=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='restaurant.category')),
                ('kitchen', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='restaurant.kitchen')),
                ('special_tags', taggit.managers.TaggableManager(help_text='Add special food tags for the item. Not more than 3.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
